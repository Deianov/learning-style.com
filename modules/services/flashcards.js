import {data, elements, notify, page, Bar, BAR_IDS, Cards, UserInput, List, Tags, APP_IS_STATIC, APP_NAME, factory, ScopeCounter, Timer, TimerOption, removeHTML, localRepository} from './../app.js';
const MSG_SERVER_REQUIRED="Server side required!",FLASHCARDS_WAITING_TO_REPEAT=5;var PLAY_STEP;!function(t){t[t.NEXT=1]="NEXT",t[t.SKIP=2]="SKIP",t[t.PREVIOUS=-1]="PREVIOUS",t[t.REPEAT=0]="REPEAT"}(PLAY_STEP||(PLAY_STEP={}));class Flashcards{key="";controller;json;counter;bar;list;cards;input;tags;static instance;btnEdit;btnAdd;timer;constructor(){Flashcards.instance=this,this.btnEdit=()=>notify.btn("info","edit",Flashcards.edit,{hideSvg:!1,button:{svg:{id:"edit",width:14}}}),this.btnAdd=notify.addCustomMethod("btnAdd",elements.messages,"msg",notify.renders.BUTTON,{capacity:1,button:{func:()=>Flashcards.instance.list.appendRow(),svg:{id:"plus",width:22,height:22,color:"green"}}}),this.timer=new Timer,this.counter=new ScopeCounter(0,0,void 0)}async render(t){this.json=t,this.key=APP_NAME+"/"+this.json.exercise.path,this.counter.resetRange(0,this.json.state.rows),this.bar=await factory.getInstanceWithArgs(Bar,elements.control),this.list=await factory.getInstanceWithArgs(List,elements.content),this.cards=await factory.getInstanceWithArgs(Cards,elements.content),this.input=await factory.getInstanceWithArgs(UserInput,elements.content),this.tags=await factory.getInstanceWithArgs(Tags,elements.bottom),this.bar.render(this.json),this.list.render(this.json.data),this.tags.render(),this.btnEdit()}start(){page.isActive?this.stop():(this.counter.reset(),this.bar.start(),this.list._remove(),this.tags._remove(),this.cards.render(this.json),this.input.render(this.json,Flashcards.onTextareaChange),this.play(PLAY_STEP.NEXT),page.play(!0),printResultsHistoryFromLocalState(this.key,this.timer),this.timer.start())}play(t){let s=-1;if(!this.counter.hasNext()&&(t===PLAY_STEP.NEXT||t===PLAY_STEP.SKIP))return this.timer.stop(),void this.finish({path:this.json.exercise.path,count:this.counter.getPreviousCount(),stack:this.counter.getResults().stack,success:this.input.successCounter.value(),errors:this.input.errorsCounter.value(),timer:this.timer.result(TimerOption.minutes,TimerOption.seconds)});t===PLAY_STEP.NEXT?s=this.counter.next().getValue():t===PLAY_STEP.SKIP?(this.input.clear(),s=this.counter.skip().getValue()):t===PLAY_STEP.PREVIOUS?(this.input.stats.change("success",this.input.successCounter.back()),s=this.counter.previous().getValue()||0):t===PLAY_STEP.REPEAT&&(s=this.counter.repeat(5).getValue()),this.list.isValidRow(s,this.json.data.length)?this.input.state.error?(this.cards.setStatus("error",!0),this.cards.update(this.json.state.card),this.input.repeat()):(this.cards.setStatus("error",!1),this.input.stats.change("done",this.counter.getPreviousCount()||1),this.cards.populate(s),this.input.next(),this.bar.setRow((s+1).toString())):console.error("Bad row number!")}stop(){page.isActive&&(this.bar.stop(),this.cards._remove(),this.input._remove(),elements.content.innerHTML="",this.list.render(this.json.data),this.tags.render(),page.play(!1))}finish(t){this.stop(),this.list._visible(!1),this.controller?.processResult(t),processExerciseResult(this.key,t)}toggleShuffle(){this.bar.shuffle(this.counter.toggleShuffle()),this.input.reset(),this.play(PLAY_STEP.NEXT)}static edit(){Flashcards.instance.stop(),notify.btn("error","save",Flashcards.save),Flashcards.instance.btnAdd("info","add");const t=Flashcards.instance;t.list.render(t.json.data,{contenteditable:!0})}static async save(){const t=Flashcards.instance;t.btnEdit(),notify.with("btnAdd").clear();const s=[];for(const e of t.list.read())s.push(e.map((t=>removeHTML(t))));if(APP_IS_STATIC){const e=s.sort(((t,s)=>t[0].localeCompare(s[0]))).map((t=>t.slice(1)));return t.json.data=e,t.list.render(e),void notify.alert("error",MSG_SERVER_REQUIRED)}const e=await data.getJsonWithPayload(t.json.exercise.path,{username:USER.username||"",data:s});e&&e.status,t.list.render(t.json.data)}static onTextareaChange(t){Flashcards.instance.play(t.state.success?1:0)}clickButton(t){if(t){if(t===BAR_IDS.START)Flashcards.instance.start();else if(t===BAR_IDS.BACK)Flashcards.instance.play(PLAY_STEP.PREVIOUS);else if(t===BAR_IDS.FORWARD)Flashcards.instance.play(PLAY_STEP.SKIP);else if(t===BAR_IDS.SHUFFLE)Flashcards.instance.toggleShuffle();else if(t.startsWith(BAR_IDS.TAB)){const s=parseInt(t.slice(BAR_IDS.TAB.length));Flashcards.instance.bar.toggle(s),Flashcards.instance.list.updateColumnView(s,Flashcards.instance.json.state.tabs),Flashcards.instance.cards.update(s)}Flashcards.instance.input.visible(!0)}}setController(t){this.controller=t}}function printResultsHistoryFromLocalState(t,s){const e=localRepository.getItem(t);if(e){const t=JSON.parse(e);if(t?.games){const{stack:e,success:i,errors:r,timer:a}=t,n=s.setTime(a).result(TimerOption.minutes,TimerOption.seconds).label,o=()=>{notify.alert("info",`Top result - successes: ( ${i} / ${e} ), errors: ( ${r} ), time: ${n}`)};notify.btn("","successful: "+t.games,o,{hideSvg:!0,button:{tag:"small"}})}}}function processExerciseResult(t,s){const{count:e,stack:i,success:r,errors:a,timer:n}=s,o=localRepository.getItem(t),c=r/i;if(isNaN(c)||c<.9)return notify.alert("info","Done with less than 90%."),void notify.alert("info","Play again ?");if(notify.alert("success","Well done !!!"),notify.alert("info","Play again ?"),!o)return void localRepository.setItem(t,JSON.stringify({games:1,count:e,stack:i,success:r,errors:a,timer:n.time}));const l=JSON.parse(o);l.games++,notify.msg("success",`${l.games} ${1===l.games?"time":"times"}`,{prefix:"Finished: "}),r>l.success&&(l.success=r,notify.alert("success",`Top success points: ${r} !!!`),notify.msg("success",`${r} !!!`,{prefix:"Top success points: "})),n.time<l.timer&&(l.timer=n.time,notify.alert("success",`Top time: ${n.label} !!!`),notify.msg("success",`${n.label} !!!`,{prefix:"Top time: "})),a<l.errors&&(l.errors=a,notify.alert("success",`Top errors points: ${r} !!!`),notify.msg("success",`${r} !!!`,{prefix:"Top errors points: "})),localRepository.setItem(t,JSON.stringify(l))}export default Flashcards;